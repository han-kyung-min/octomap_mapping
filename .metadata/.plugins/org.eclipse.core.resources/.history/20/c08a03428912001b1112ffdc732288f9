/*
 * OctomapTest.hpp
 *
 *  Created on: Oct 20, 2020
 *      Author: hankm
 */

#ifndef OCTOMAPTEST_HPP_
#define OCTOMAPTEST_HPP_


#include <ros/ros.h>
#include <visualization_msgs/MarkerArray.h>
#include <nav_msgs/OccupancyGrid.h>
#include <std_msgs/ColorRGBA.h>

// #include <moveit_msgs/CollisionObject.h>
// #include <moveit_msgs/CollisionMap.h>
#include <sensor_msgs/PointCloud2.h>
#include <std_srvs/Empty.h>
#include <dynamic_reconfigure/server.h>

#include <pcl/point_types.h>
#include <pcl/conversions.h>
#include <pcl_ros/transforms.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/segmentation/sac_segmentation.h>
#include <pcl/io/pcd_io.h>
#include <pcl/filters/extract_indices.h>
#include <pcl/filters/passthrough.h>
#include <pcl_conversions/pcl_conversions.h>


#include <tf/transform_listener.h>
#include <tf/message_filter.h>
#include <message_filters/subscriber.h>
#include <octomap_msgs/Octomap.h>
#include <octomap_msgs/GetOctomap.h>
#include <octomap_msgs/BoundingBoxQuery.h>
#include <octomap_msgs/conversions.h>

#include <octomap_ros/conversions.h>
#include <octomap/octomap.h>
#include <octomap/OcTreeKey.h>


namespace octomap_test
{
class OctomapTest
{

	typedef pcl::PointXYZ PCLPoint;
	typedef pcl::PointCloud<pcl::PointXYZ> PCLPointCloud;
	typedef octomap::OcTree OcTreeT;

	OctomapTest( std::string strpath );
	virtual ~OctomapTest();

	bool openFile(const std::string& filename);
	bool loadptc( );
	bool loadcellinfo( ) ;
	bool save_occ_cells( ) ;

private:

	OcTreeT* m_octree;
	octomap::KeyRay m_keyRay;  // temp storage for ray casting
	octomap::OcTreeKey m_updateBBXMin;
	octomap::OcTreeKey m_updateBBXMax;

	double m_res;
	unsigned m_treeDepth;
	unsigned m_maxTreeDepth;

	bool m_compressMap;

	std::string m_str_path ;
	std::ifstream m_ifs_cellinfo ;
	std::ifstream m_ptc_xyz ;


	pcl::PointCloud<pcl::PointXYZ>::Ptr m_pPtCloud ;
};

}

#endif /* OCTOMAPTEST_HPP_ */
