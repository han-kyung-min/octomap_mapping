/*
 * A simple 2D gridmap structure
 *
 * Copyright 2011 Armin Hornung, University of Freiburg
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the University of Freiburg nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "gridmap_2d/GridMap2D.h"
#include <ros/console.h>


namespace gridmap_2d{

GridMap2D::GridMap2D(int32_t nNumGridMapDownSample  )
//: m_frameId("/map")
: m_frameId("/world"), // by kmHan
  m_nNumDownSample( nNumGridMapDownSample )
{
	//m_binaryMapUnknownPaddedFlip_wRobot.create(MAX_HEIGHT, MAX_WIDTH, CV_8UC1);
	m_binaryMapUnknownPadded_wRobot.create(MAX_HEIGHT, MAX_WIDTH, CV_8UC1);
	m_binaryMapUnknownPadded.create(MAX_HEIGHT, MAX_WIDTH, CV_8UC1);
	m_binaryMapUnknownPadded.setTo(UNKNOWN) ;
	m_nPrevCoverage = 0;
	m_nTotCoverage = 0;

	m_nNumDownSample = nNumGridMapDownSample ;
	m_nGridMapWidth =  MAX_WIDTH /std::pow(2,m_nNumDownSample)  ;
	m_nGridMapHeight = MAX_HEIGHT/std::pow(2,m_nNumDownSample)  ;

	//m_binaryMapUnknownPadded_init = cv::imread("/home/hankm/catkin_ws/src/gridmap_2d/images/complete/binaryMapUnknownPadded_gt.png", 0);
}

GridMap2D::~GridMap2D() {
	m_binaryMapUnknownPadded.release();
	m_binaryMapUnknownPadded_wRobot.release();
	//m_binaryMapUnknownPaddedFlip_wRobot.release();
}

void GridMap2D::updateDistanceMap(){

  cv::distanceTransform(m_binaryMap, m_distMap, cv::DIST_L2, cv::DIST_MASK_PRECISE);
  // distance map now contains distance in meters:
  if( m_distMap.rows == 0 )
	  ROS_ERROR("distance map is empty \n");
  m_distMap = m_distMap * m_mapInfo.resolution;
}


void GridMap2D::setMap(const nav_msgs::OccupancyGridConstPtr& grid_map, bool unknown_as_obstacle){
  m_mapInfo = grid_map->info;
  m_frameId = grid_map->header.frame_id;
  // allocate map structs so that x/y in the world correspond to x/y in the image
  // (=> cv::Mat is rotated by 90 deg, because it's row-major!)
  float tocell = 1.0/m_mapInfo.resolution ;
  m_binaryMap = cv::Mat(m_mapInfo.height, m_mapInfo.width, CV_8UC1, cv::Scalar(UNKNOWN));

  ROS_WARN("mapInfo w, h, res: %u %u %f\n", m_binaryMap.cols, m_binaryMap.rows, m_mapInfo.resolution );
  ROS_WARN("origin: %f %f \n", m_mapInfo.origin.position.x * tocell, m_mapInfo.origin.position.y * tocell);

  std::vector<signed char>::const_iterator mapDataIter = grid_map->data.begin();

  //TODO check / param
  unsigned char map_occ_thres = 70;

  cv::flip(m_binaryMap, m_binaryMap, 0);

  // update padded map
  //m_binaryMapUnknownPadded.setTo(UNKNOWN);

  //cv::Mat dst_roi = m_binaryMapUnknownPadded( cv::Rect(left, top, width, height ) );

  m_distMap = cv::Mat(m_binaryMap.size(), CV_32FC1);
  updateDistanceMap();

  //m_binaryMapUnknownPadded.setTo(127) ;
  ROS_INFO("GridMap2D created with %d x %d cells at %f resolution.", m_mapInfo.width, m_mapInfo.height, m_mapInfo.resolution);
}


void GridMap2D::SetGridMap(const float fy, const float fx, const float fres, Eigen::Matrix4f sensorToWorld, uchar value)
{

//	m_mapInfo = grid_map.info;

	float tocell = 1.0/fres ;

	// for some reason, quat of grid_map is (0,0,0,0) which is wrong... it has to be (0,0,0,1) even if the angle is zero
	// So, let's just assume that theta is zero

	/*
	 *  Global Map Image
	 *  (Wx, Wy): world coord w.r.t the global map image (0,0) --> (H/2, W/2)
	 *  (rx, ry): robot coord w.r.t the local map image: neg number w.r.t (0,0)
	 *  (ox, oy): robot coord w.r.t the local map image: neg number
								  W
	  ----------------------------------------------------------
	  .
	  .
	  .
	  .
	  .
	  .	--------------------(Wx, Wy)
	  .							.
	H .							.
	  .		.---(rx, ry)-------	.
	  .		.		.			.
	  .		.		.			.
	  .		.		.----------	.
	  .		.					.
	  .		.					.
	  .    (ox,oy)--------------.
	  .
	  .---------------------------------------------------------

	*/

	// Yw is not robot pose, but point(voxel) locations !!!
	  int Yw = (int)(fy * tocell) + GLOBAL_HEIGHT/2 ;
	  int Xw = (int)(fx * tocell) + GLOBAL_WIDTH /2 ;

//ROS_WARN("%u %u \n", m_binaryMapUnknownPadded.rows, m_binaryMapUnknownPadded.cols);
//cv::imwrite("/home/hankm/catkin_ws/src/gridmap_2d/images/tmp_gridmap.png", m_binaryMapUnknownPadded);
//assert(0);
	  cv::Scalar intensityScalar = m_binaryMapUnknownPadded.at<uchar>(Yw, Xw + X_OFFSET);
	  uint8_t intensity = static_cast<uint8_t>(intensityScalar.val[0] );
//ROS_WARN("pix: %u %u\t", intensity, UNKNOWN );
	  if( intensity == UNKNOWN )
	  {
		  incrementCellCoverage();
	  }

	  m_binaryMapUnknownPadded.at<uchar>(Yw , Xw + X_OFFSET) = value ;
}

void GridMap2D::RotateMap( Eigen::Matrix4f sensor2World, const float fres )
{
	cv::Point2f canvas_cent( MAX_WIDTH/2, MAX_HEIGHT/2 ) ;
	Eigen::Vector3f pose =  toSE2( sensor2World ) ;

	float tocell = 1.0/fres ;
	float fRx_c = pose(0) * tocell + GLOBAL_WIDTH/ 2 + X_OFFSET ; // robot wrt canvas
	float fRy_c = pose(1) * tocell + GLOBAL_HEIGHT/2 ;
	float fAngDeg = ( pose(2) ) * TODEG ;

	cv::Mat Rt_canvas_robot = cv::getRotationMatrix2D(cv::Point2f(fRx_c, fRy_c), fAngDeg, 1) ;
	cv::Mat canvas_H_robot  = cv::Mat::eye(3,3,CV_64F);
	Rt_canvas_robot.copyTo(canvas_H_robot.rowRange(0, 2)); // means 0 ~ 1 i.e) the last line is excluded

	cv::Mat Rt_cent  		= cv::getRotationMatrix2D(canvas_cent, 0, 1);
	cv::Mat canvas_H_cent  	= cv::Mat::eye(3,3,CV_64F);
	Rt_cent.copyTo(canvas_H_cent.rowRange(0, 2));
	//cv::Mat robot_H_cent 	= canvas_H_robot.inv() * canvas_H_cent ;

	cv::Mat Rt_robot_canvas = cv::Mat::zeros(2,3,CV_64F);
	cv::Mat robot_H_canvas = canvas_H_robot.inv() * canvas_H_cent;
	robot_H_canvas.rowRange(0,2).copyTo(Rt_robot_canvas);

	ROS_WARN("robot pose: (%f %f)_canvas \n", fRx_c, fRy_c);
	ROS_WARN("robot pose: (%f %f)_robot \n", fRx_c, fRy_c);

	cv::warpAffine(m_binaryMapUnknownPadded_wRobot, m_binaryMapUnknownPadded_wRobot, Rt_robot_canvas, m_binaryMapUnknownPadded.size()) ;
	cv::circle(m_binaryMapUnknownPadded_wRobot, canvas_cent, 2, cv::Scalar(200), 1, 8, 0);
}

//void GridMap2D::SetRobot()
//{
//
//	ROS_WARN("b4 set robot \n");
//
//	cv::rectangle(m_binaryMapUnknownPadded_wRobot,
//			cv::Rect(m_binaryMapUnknownPadded.cols/2-10, m_binaryMapUnknownPadded.rows/2-10, 20, 20),
//			cv::Scalar(190), -1, 8, 0);
//
//	ROS_WARN("af set robot \n");
//
//}

void GridMap2D::SetRobot(Eigen::Matrix4f sensor2World, const float fres)
{

	float tocell = 1.0/fres ;
//	int nRx = static_cast<int>(sensor2World(0,3)*tocell) ;
//	int nRy = static_cast<int>(sensor2World(1,3)*tocell) ;

	Eigen::Vector3f pose =  toSE2( sensor2World );
	float fRx = pose(0) * tocell;
	float fRy = pose(1) * tocell;
	int nRx = static_cast<int>(fRx);
	int nRy = static_cast<int>(fRy);

//	const int nrx = static_cast<int>(frx*tocell) ;
//	const int nry = static_cast<int>(fry*tocell) ;
	const float fRadius = tocell/2 ;
	const int nRadius = static_cast<int>(fRadius);

	//int Wx = m_mapInfo.width  / 2 ; // map center w.r.t
	//int Wy = m_mapInfo.height / 2 ;
	int nRxw = nRx + GLOBAL_WIDTH /2 ;
	int nRyw = nRy + GLOBAL_HEIGHT/2 ;

	int nRx_off = nRxw + X_OFFSET ;
	int nRy_off = nRyw ; //+ Y_OFFSET ;
	//m_binaryMapUnknownPadded_init.copyTo(m_binaryMapUnknownPadded_wRobot);
	m_binaryMapUnknownPadded.copyTo(m_binaryMapUnknownPadded_wRobot);

//	cv::circle(m_binaryMapUnknownPadded_wRobot, cv::Point(nRx_off, nRy_off), nRadius, cv::Scalar::all(255));
	// line
	int nHx_off = nRx_off + static_cast<int>( fRadius * cos( pose(2) + PI/2 ) )  ;
	int nHy_off = nRy_off + static_cast<int>( fRadius * sin( pose(2) + PI/2 ) )  ;
	ROS_ERROR("%d %d %d %d %f %f\n", nRx_off, nRy_off, nHx_off, nHy_off, fRadius, pose(2) );
	cv::line( m_binaryMapUnknownPadded_wRobot, cv::Point(nRx_off, nRy_off),
										cv::Point(nHx_off, nHy_off), cv::Scalar::all(200), 2 );

	int nVx0 = nRx_off + static_cast<int>( tocell/3 * cos( pose(2) + PI ) )  ;
	int nVy0 = nRy_off + static_cast<int>( tocell/3 * sin( pose(2) + PI ) )  ;
	int nVx1 = nRx_off + static_cast<int>( tocell/3 * cos( pose(2) ) )  ;
	int nVy1 = nRy_off + static_cast<int>( tocell/3 * sin( pose(2) ) )  ;

	cv::line( m_binaryMapUnknownPadded_wRobot, cv::Point(nVx0, nVy0),
										cv::Point(nVx1, nVy1), cv::Scalar::all(180), 2 );


}
//

void GridMap2D::downSampleGridmap()
{
	//m_binaryMapDownSampled = m_binaryMapUnknownPaddedFlip_wRobot.clone();

	m_binaryMapDownSampled = m_binaryMapUnknownPadded_wRobot.clone() ;

	for(int i=0; i< m_nNumDownSample; i++)
	{
		cv::pyrDown(m_binaryMapDownSampled, m_binaryMapDownSampled,
				cv::Size(m_binaryMapDownSampled.cols/2, m_binaryMapDownSampled.rows/2 ) );
	}

	ROS_WARN("orig size:  %u   %u \n", m_binaryMapUnknownPadded_wRobot.rows, m_binaryMapUnknownPadded_wRobot.cols );
	ROS_WARN("pyrdown size: %u %u \n", m_binaryMapDownSampled.rows, m_binaryMapDownSampled.cols);
}

cv::Mat GridMap2D::gridMapDownSampled()
{
	return m_binaryMapDownSampled;
}

nav_msgs::OccupancyGrid GridMap2D::toOccupancyGridMsg() const{
  nav_msgs::OccupancyGrid msg;
  msg.header.frame_id = m_frameId;
  msg.header.stamp = ros::Time::now();
  msg.info = m_mapInfo;
  msg.data.resize(msg.info.height*msg.info.width);

  // iterate over map, store in data
  std::vector<signed char>::iterator mapDataIter = msg.data.begin();
  // (0,0) is lower left corner of OccupancyGrid
  for(unsigned int j = 0; j < m_mapInfo.height; ++j){
    for(unsigned int i = 0; i < m_mapInfo.width; ++i){
      if (m_binaryMap.at<uchar>(i,j) == OCCUPIED)
        *mapDataIter = 100;
      else
        *mapDataIter = 0;

      ++mapDataIter;
    }
  }

  return msg;
}

void GridMap2D::reset()
{
	//m_binaryMap.setTo(UNKNOWN);
	//m_binaryMapUnknownPaddedFlip_wRobot.setTo(UNKNOWN);
	m_binaryMapUnknownPadded_wRobot.setTo(UNKNOWN);
	m_binaryMapUnknownPadded.setTo(UNKNOWN) ;
	m_binaryMapDownSampled.setTo(UNKNOWN) ;
	m_nPrevCoverage = 0;
	m_nTotCoverage = 0;
}

void GridMap2D::setMap(const cv::Mat& binaryMap){
  m_binaryMap = binaryMap.clone();
  m_distMap = cv::Mat(m_binaryMap.size(), CV_32FC1);

  cv::distanceTransform(m_binaryMap, m_distMap, cv::DIST_L2, cv::DIST_MASK_PRECISE);
  // distance map now contains distance in meters:
  m_distMap = m_distMap * m_mapInfo.resolution;

  ROS_INFO("GridMap2D copied from existing cv::Mat with %d x %d cells at %f resolution.", m_mapInfo.width, m_mapInfo.height, m_mapInfo.resolution);

}

void GridMap2D::inflateMap(double inflationRadius){
  m_binaryMap = (m_distMap > inflationRadius );
  // recompute distance map with new binary map:
  cv::distanceTransform(m_binaryMap, m_distMap, cv::DIST_L2, cv::DIST_MASK_PRECISE);
  m_distMap = m_distMap * m_mapInfo.resolution;
}

// See costmap2D for mapToWorld / worldToMap implementations:

void GridMap2D::mapToWorld(unsigned int mx, unsigned int my, double& wx, double& wy) const {
  wx = m_mapInfo.origin.position.x + (mx+0.5) * m_mapInfo.resolution;
  wy = m_mapInfo.origin.position.y + (my+0.5) * m_mapInfo.resolution;
}



void GridMap2D::worldToMapNoBounds(double wx, double wy, unsigned int& mx, unsigned int& my) const {
  mx = (int) ((wx - m_mapInfo.origin.position.x) / m_mapInfo.resolution);
  my = (int) ((wy - m_mapInfo.origin.position.y) / m_mapInfo.resolution);
}

bool GridMap2D::worldToMap(double wx, double wy, unsigned int& mx, unsigned int& my) const {
  if(wx < m_mapInfo.origin.position.x || wy < m_mapInfo.origin.position.y)
    return false;

  mx = (int) ((wx - m_mapInfo.origin.position.x) / m_mapInfo.resolution);
  my = (int) ((wy - m_mapInfo.origin.position.y) / m_mapInfo.resolution);

  if(mx < m_mapInfo.width && my < m_mapInfo.height)
    return true;

  return false;
}

bool GridMap2D::inMapBounds(double wx, double wy) const{
  unsigned mx, my;
  return worldToMap(wx,wy,mx,my);
}

float GridMap2D::distanceMapAt(double wx, double wy) const{
  unsigned mx, my;

  if (worldToMap(wx, wy, mx, my))
    return m_distMap.at<float>(mx, my);
  else
    return -1.0f;
}


uchar GridMap2D::binaryMapAt(double wx, double wy) const{
  unsigned mx, my;

  if (worldToMap(wx, wy, mx, my))
    return m_binaryMap.at<uchar>(mx, my);
  else
    return 0;
}

float GridMap2D::distanceMapAtCell(unsigned int mx, unsigned int my) const{
  return m_distMap.at<float>(mx, my);
}


uchar GridMap2D::binaryMapAtCell(unsigned int mx, unsigned int my) const{
  return m_binaryMap.at<uchar>(mx, my);
}

uchar& GridMap2D::binaryMapAtCell(unsigned int mx, unsigned int my){
  return m_binaryMap.at<uchar>(mx, my);
}


bool GridMap2D::isOccupiedAtCell(unsigned int mx, unsigned int my) const{
  return (m_binaryMap.at<uchar>(mx, my) < 255);
}


bool GridMap2D::isOccupiedAt(double wx, double wy) const{
  unsigned mx, my;
  if (worldToMap(wx, wy, mx, my))
    return isOccupiedAtCell(mx, my);
  else
    return true;
}

}


