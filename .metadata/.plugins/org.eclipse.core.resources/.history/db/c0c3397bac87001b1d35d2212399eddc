/*
 * frontier_detector_node.cpp
 *
 *  Created on: Mar 18, 2021
 *      Author: hankm
 */

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <octomap_server/mapframedata.h>

#include <ros/ros.h>
#include <ros/console.h>
#include <cv_bridge/cv_bridge.h>

#include <FrontierDetector.hpp>

using namespace frontier_detector;

int main(int argc, char** argv){
  ros::init(argc, argv, "frontier_detector");
  const ros::NodeHandle nh;
  const ros::NodeHandle private_nh("~");

  ros::WallTime start_, end_;
  if (argc > 2 || (argc == 2 && std::string(argv[1]) == "-h")){
    ROS_ERROR("%s", USAGE);
    exit(-1);
  }

  FrontierDetector front_detector(private_nh, nh);
  ros::spinOnce();

  ROS_WARN("octomapserver initialized \n");

  try{
    ros::spin();
  }
  catch(std::runtime_error& e)
  {
    ROS_ERROR("frontier_detector exception: %s", e.what());
    return -1;
  }

  return 0;
}


