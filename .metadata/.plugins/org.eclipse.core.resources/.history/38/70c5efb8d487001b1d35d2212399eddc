/*
 * FrontierDetector.hpp
 *
 *  Created on: Mar 18, 2021
 *      Author: hankm
 */

#ifndef INCLUDE_FRONTIERDETECTOR_HPP_
#define INCLUDE_FRONTIERDETECTOR_HPP_

#define OCCUPIED_BIN_THR (128)

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include "octomap_server/mapframedata.h"

#include <ros/ros.h>
#include <ros/console.h>
#include <cv_bridge/cv_bridge.h>

#include "nav_msgs/OccupancyGrid.h"
#include "geometry_msgs/PointStamped.h"
#include "std_msgs/Header.h"
#include "nav_msgs/MapMetaData.h"
#include "geometry_msgs/Point.h"
#include "visualization_msgs/Marker.h"
#include <tf/transform_listener.h>

namespace frontier_detector
{

class FrontierDetector
{
public:
	FrontierDetector(const ros::NodeHandle private_nh_, const ros::NodeHandle &nh_);
	virtual ~FrontierDetector();

	virtual void mapCallback(const octomap_server::mapframedata& msg ) ;

	int FrontierDetector::gridValue(nav_msgs::OccupancyGrid &mapData,std::vector<float> Xp);


private:

	ros::NodeHandle m_nh;
	ros::NodeHandle m_nh_private;
	ros::Subscriber m_mapframedataSub ;

	cv::Mat m_matImg ;
	cv::Mat m_morph_kernel ;
};

}



#endif /* INCLUDE_FRONTIERDETECTOR_HPP_ */
